<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yefengyu.github.io/"/>
  <updated>2019-02-15T14:49:52.769Z</updated>
  <id>http://yefengyu.github.io/</id>
  
  <author>
    <name>yefengyu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初试Spring-Cloud-Gateway</title>
    <link href="http://yefengyu.github.io/2019/02/15/%E5%88%9D%E8%AF%95Spring-Cloud-Gateway/"/>
    <id>http://yefengyu.github.io/2019/02/15/初试Spring-Cloud-Gateway/</id>
    <published>2019-02-15T13:13:50.000Z</published>
    <updated>2019-02-15T14:49:52.769Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ol><li><strong>什么是Spring Cloud Gateway</strong></li></ol><p><code>Spring Cloud Gateway</code>是Spring官方基于Spring 5.0，Spring Boot 2.0和Project Reactor等技术开发的网关，Spring Cloud Gateway旨在为微服务架构提供一种简单而有效的统一的API路由管理方式。</p><ol start="2"><li><strong>提供依赖</strong></li></ol><p>Spring Cloud Gateway需要netty运行环境，由Spring Boot 和 Spring Webflux提供。它无法运行在Servlet 容器中，因此无法打成WAR包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果已经添加了依赖，但是由于一些原因，你不想使用Spring Cloud Gateway，可以使用</p><p><code>spring.cloud.gateway.enabled=false</code></p><ol start="3"><li><p><strong>重要概念</strong></p><ul><li>路由：Gateway的基础构建模块。它包括一个ID，一个目标URL，一个断言集合和一个过滤器集合。如果断言判断为真，则路由匹配。</li><li>断言：这是Java8的新增功能，输入的类型为Spring框架的ServerWebExchange。它可以匹配HTTP请求中的任何东西，比如：请求头或者参数。</li><li>过滤器：是Spring框架的GatewayFilter，请求和响应都可以被Filter修改。</li></ul></li><li><p><strong>如何工作</strong></p><p><img src="/2019/02/15/初试Spring-Cloud-Gateway/spring_cloud_gateway_diagram.png" alt="spring_cloud_gateway_diagram"></p><blockquote><p>在路由中没有指定端口，HTTP将被指定为80，HTTPS 将被指定为443。</p></blockquote></li></ol><h1 id="构建服务端"><a href="#构建服务端" class="headerlink" title="构建服务端"></a>构建服务端</h1><p>构建一个spring mvc程序，不做具体介绍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello: spring-cloud-gateway"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行如下图：</p><p><img src="/2019/02/15/初试Spring-Cloud-Gateway/springmvc.png" alt="springmvc"></p><h1 id="构建网关"><a href="#构建网关" class="headerlink" title="构建网关"></a>构建网关</h1><ol><li><p><strong>添加依赖 </strong> （概述中第二节，注意是Spring boot工程）</p></li><li><p><strong>添加端口</strong> 为网关项目加入配置文件application.yml，修改服务器端口为9000，配置文件内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9000</span></span><br></pre></td></tr></table></figure></li><li><p><strong>配置网关</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">gateway_server</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    gateway:</span></span><br><span class="line"><span class="attr">      default-filters:</span></span><br><span class="line"><span class="attr">      routes:</span></span><br><span class="line"><span class="attr">        - id:</span> <span class="string">my_route</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">http://localhost:8080/</span></span><br><span class="line"><span class="attr">          predicates:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">Path=/gateway/**</span></span><br><span class="line"><span class="attr">          filters:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">StripPrefix=1</span></span><br></pre></td></tr></table></figure></li><li><p><strong>启动服务，测试</strong></p><p><img src="/2019/02/15/初试Spring-Cloud-Gateway/springgateway.png" alt="Spring-gateway"></p></li><li><p><strong>总结</strong></p><ul><li>id：固定，不同 id 对应不同的功能</li><li>uri：目标服务地址</li><li>predicates：路由条件</li><li>filters：过滤规则</li></ul><p>上面的配置说明：</p><p>访问 <a href="http://localhost:9000/gateway" target="_blank" rel="noopener">http://localhost:9000/gateway</a> 路由到  <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p><p>访问 <a href="http://localhost:9000/gateway/hello" target="_blank" rel="noopener">http://localhost:9000/gateway/hello</a> 路由到  <a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;什么是Spring Cloud Gateway&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;Spr
      
    
    </summary>
    
      <category term="Spring Cloud Gateway" scheme="http://yefengyu.github.io/categories/Spring-Cloud-Gateway/"/>
    
    
      <category term="网关" scheme="http://yefengyu.github.io/tags/%E7%BD%91%E5%85%B3/"/>
    
      <category term="微服务" scheme="http://yefengyu.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>JVM内存结构</title>
    <link href="http://yefengyu.github.io/2019/02/11/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/"/>
    <id>http://yefengyu.github.io/2019/02/11/JVM内存结构/</id>
    <published>2019-02-11T12:30:33.000Z</published>
    <updated>2019-02-11T15:11:49.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JVM内存结构简介"><a href="#JVM内存结构简介" class="headerlink" title="JVM内存结构简介"></a>JVM内存结构简介</h1><p>java虚拟机在执行java程序的过程中，会把它管理的内存划分为若干个不同的数据区域，这些区域用途不一，有的随着虚拟机进程的启动而存在，有些区域则是依赖用户线程的启动和结束而建立和销毁。根据JVM规范，JVM应该被划分为五块区域——<strong>即虚拟机栈、堆、方法区、程序计数器、本地方法栈</strong>五个部分。</p><p><img src="/2019/02/11/JVM内存结构/虚拟机内存结构.PNG" alt="JVM内存结构"></p><h1 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h1><p>程序计数器可以看做当前线程执行字节码的行号指示器，字节码在工作的时候就是更改程序计数器的值来获取下一条字节码指令。字节码指令如分支、循环、异常处理等等。</p><p><strong>为什么程序计数器是线程私有的？</strong></p><p>因为虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何时刻一个处理器只会执行一条线程中的指令，因此为了线程切换后能恢复到正常的执行位置，每条线程都需要有一个独立的程序计数器，所以程序计数器是线程私有的。</p><blockquote><ol><li>如果线程执行的是java方法，线程对应的程序计数器记录的是正在执行虚拟机字节码指令地址；</li><li>如果执行的是Native方法，则计数器为undefined</li></ol></blockquote><h1 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h1><p>虚拟机栈描述的是java方法执行的内存模型。每个方法在执行的同时都会创建一个栈帧，用于存放局部变量表、操作数栈、动态链接、方法出口等。</p><p><img src="/2019/02/11/JVM内存结构/java虚拟机栈.PNG" alt="虚拟机栈"></p><ul><li>局部变量表：</li></ul><blockquote><ol><li><p>存放编译时可知的基本数据类类型；</p></li><li><p>对象引用。</p></li></ol></blockquote><ul><li>异常情况</li></ul><blockquote><ol><li>线程请求的栈容量超过了虚拟机栈允许的最大栈容量，将抛出<strong>StackOverflowError</strong></li><li>如果虚拟机栈可以动态扩展，并且尝试申请扩展发现内存不够；或者创建新线程的时候没有足够内存去创建虚拟机栈，则抛出<strong>OutOfMemoryError</strong></li></ol></blockquote><h1 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h1><p>和虚拟机栈相似，区别是：<strong>虚拟机栈为执行java方法服务；而本地方法栈则为虚拟机使用的Native方法服务。</strong></p><p><em><font color="FF0000">由于虚拟机栈和本地方法栈都是存储线程方法的区域，每个线程都有自己的方法的局部变量等，因此也是线程私有的</font></em></p><h1 id="java堆"><a href="#java堆" class="headerlink" title="java堆"></a>java堆</h1><p>对于大多数应用，java 堆是存放对象实例的地方，占用内存最大，所有线程共享，虚拟机启动时创建，是垃圾收集器管理的主要区域。堆在物理空间可以不连续，只要逻辑上连续即可。</p><blockquote><p>如果堆中没有内存分配实例、并且堆无法再扩展时，将会抛出OutOfMemoryError</p></blockquote><h1 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h1><p>方法区为各个线程所共享区域，用于存放虚拟机加载的类信息、常量、静态变量等数据。</p><blockquote><p>当方法区无法满足内存分配需求的时候，将会抛出OutOfMemoryError</p></blockquote><p><strong>运行时常量池：</strong>这是方法区的一部分，Class文件除了有类的版本、字段、方法、接口等信息外，还有一项是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载之后进入方法区的运行时常量池中存放。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JVM内存结构简介&quot;&gt;&lt;a href=&quot;#JVM内存结构简介&quot; class=&quot;headerlink&quot; title=&quot;JVM内存结构简介&quot;&gt;&lt;/a&gt;JVM内存结构简介&lt;/h1&gt;&lt;p&gt;java虚拟机在执行java程序的过程中，会把它管理的内存划分为若干个不同的数据区域
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://yefengyu.github.io/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="JVM" scheme="http://yefengyu.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Spring依赖注入-入门</title>
    <link href="http://yefengyu.github.io/2019/02/10/Spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5-%E5%85%A5%E9%97%A8/"/>
    <id>http://yefengyu.github.io/2019/02/10/Spring依赖注入-入门/</id>
    <published>2019-02-10T05:31:34.000Z</published>
    <updated>2019-02-10T06:17:55.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介"></a>Spring简介</h1><p>spring是一个开源框架，旨在简化java开发。为了降低java开发的复杂度，spring主要采用了以下4种关键策略：</p><ul><li>基于POJO的轻量级和最小侵入性编程</li><li>通过依赖注入和面向接口实现松耦合</li><li>基于切面和惯例进行声明式编程</li><li>通过切面和模板减少样板代码</li></ul><p>本节主要是第二点依赖注入（DI）的入门知识。</p><h1 id="探索DI"><a href="#探索DI" class="headerlink" title="探索DI"></a>探索DI</h1><p>任何一个实际应用肯定会有多个类组成，类与类之间的有着千丝万缕的关系，按照传统的做法，每个对象负责管理与自己协做的对象的引用，这将会导致高耦合。</p><ul><li>示例1：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ObjectB objectB;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObjectA</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.objectB = <span class="keyword">new</span> ObjectB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例1中ObjectA管理了一个和自己协作的对象ObjectB，对象ObjectB的创建是通过构造函数直接写死的方式。这种方式耦合度太高，对象ObjectB的属性只能在构造函数中指定（或者使用默认值），每当创建一个ObjectA，ObjectB都是一样的内容。我们想如果ObjectB有很多属性，创建对象ObjectA的时候可以指定，那么有个方法可以实现，将ObjectB参数化，比如构造函数、setter方法等。</p><ul><li>示例2：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ObjectB objectB;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObjectA</span><span class="params">(ObjectB objectB)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.objectB = objectB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例2代码通过构造方法将ObjectB对象传入，灵活度更高。但是有一点问题也需要注意，ObjectA还是和ObjectB强相关联，如果我们想更改ObjectB的逻辑，那么影响是非常大的。这个时候需要使用接口。</p><ul><li>示例3：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InterfaceA interfaceA;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObjectA</span><span class="params">(InterfaceA interfaceA)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.interfaceA = interfaceA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例3对象ObjectA是和接口InterfaceA绑定到一起，只要实现了该接口的实现类，都可以和ObjectA绑定到一起。上面的ObjectB只要实现InterfaceA接口，那么ObjectB就可以作为ObjectA的构造函数的参数。如果新加一个InterfaceA的实现类ObjectC，那么ObjectC也可以作为ObjectA的构造函数的参数。</p><blockquote><p>如果一个对象只通过接口来表明依赖关系，那么这种依赖就能够在对象本身毫不知情的情况下，用不同的具体实现类进行替换。</p></blockquote><h1 id="入门程序"><a href="#入门程序" class="headerlink" title="入门程序"></a>入门程序</h1><p>下面的入门程序和上面示例2类似，为了简单，暂时没有使用接口。</p><ol><li><p>创建maven工程，添加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.yfy.spring<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>新建一个类Programmer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Programmer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建一个类Company</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Programmer programmer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Company</span><span class="params">(Programmer programmer)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.programmer = programmer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello: "</span> + name + <span class="string">" 's "</span> + programmer.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Company持有Programmer对象，并且有一个方法hello。</p></li><li><p>传统方式使用对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Programmer programmer = <span class="keyword">new</span> Programmer();</span><br><span class="line">        programmer.setName(<span class="string">"yefengyu"</span>);</span><br><span class="line">        Company company = <span class="keyword">new</span> Company(programmer);</span><br><span class="line">        company.setName(<span class="string">"google"</span>);</span><br><span class="line">        company.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传统方式下，使用Company需要先生成Programmer对象作为其属性。programmer和company都是显示创建，并且依赖关系也是在代码中显示指定。</p></li><li><p>Spring依赖注入方式使用对象</p><ul><li><p>建立一个spring的配置文件application.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"company"</span> <span class="attr">class</span>=<span class="string">"com.yefengyu.spring.Company"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"programmer"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"google"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"programmer"</span> <span class="attr">class</span>=<span class="string">"com.yefengyu.spring.Programmer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"yefengyu"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"application.xml"</span>);</span><br><span class="line">        Company company = (Company)ctx.getBean(<span class="string">"company"</span>);</span><br><span class="line">        company.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>hello: google ‘s yefengyu</p></blockquote></li></ul></li><li><p>总结</p><p>如果Company持有一个接口A，而不是具体的对象，那么所有实现了接口A的实现类（比如Programmer）都可以在xml文件中作为company的一个构造器参数。这样比上面的示例更加接近Spring依赖注入的初衷，使得对象之间耦合度更低。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring简介&quot;&gt;&lt;a href=&quot;#Spring简介&quot; class=&quot;headerlink&quot; title=&quot;Spring简介&quot;&gt;&lt;/a&gt;Spring简介&lt;/h1&gt;&lt;p&gt;spring是一个开源框架，旨在简化java开发。为了降低java开发的复杂度，spring
      
    
    </summary>
    
      <category term="Spring核心框架" scheme="http://yefengyu.github.io/categories/Spring%E6%A0%B8%E5%BF%83%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="http://yefengyu.github.io/tags/Spring/"/>
    
      <category term="IOC" scheme="http://yefengyu.github.io/tags/IOC/"/>
    
  </entry>
  
  <entry>
    <title>简单工厂设计模式</title>
    <link href="http://yefengyu.github.io/2019/02/10/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yefengyu.github.io/2019/02/10/简单工厂设计模式/</id>
    <published>2019-02-10T03:34:26.000Z</published>
    <updated>2019-02-10T04:23:11.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><ul><li><p>简单工厂并不是标准设计模式。</p></li><li><p>简单工厂设计模式提供一个创建对象实例的功能，而无需关心其具体实现细节。被创建实例的类型可以是接口、抽象类和具体的类。</p></li><li><p>简单工厂的本质是<font color="FF0000"><strong>选择</strong></font>实现，不负责实现具体的功能。</p></li></ul><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p>接口的定义，该接口可以通过简单工厂来创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yfy.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口实现ImplA</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yfy.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImplA</span> <span class="keyword">implements</span> <span class="title">Api</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String s)</span></span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">             System.out.println(<span class="string">"implA :"</span> + s);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口实现ImplB</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yfy.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImplB</span> <span class="keyword">implements</span> <span class="title">Api</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String s)</span></span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">             System.out.println(<span class="string">"implB :"</span> + s);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yfy.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Api <span class="title">createApi</span><span class="params">(<span class="keyword">int</span> condition)</span></span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">             Api api = <span class="keyword">null</span>;</span><br><span class="line">             </span><br><span class="line">             <span class="keyword">if</span>(condition == <span class="number">1</span>)</span><br><span class="line">             &#123;</span><br><span class="line">                    api = <span class="keyword">new</span> ImplA();</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">else</span></span><br><span class="line">             &#123;</span><br><span class="line">                    api = <span class="keyword">new</span> ImplB();</span><br><span class="line">             &#125;</span><br><span class="line">           </span><br><span class="line">             <span class="keyword">return</span> api;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yfy.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">             Api api = Factory.createApi(<span class="number">1</span>);</span><br><span class="line">             api.operation(<span class="string">"正在使用简单工厂"</span>);</span><br><span class="line"></span><br><span class="line">             api = Factory.createApi(<span class="number">2</span>);</span><br><span class="line">             api.operation(<span class="string">"正在使用简单工厂"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p>implA :正在使用简单工厂</p><p>implB :正在使用简单工厂</p></blockquote><p>从上面的代码可以看出简单工厂的设计思路，要创建对象，并不用通过new出对象，而是根据工厂代为创建。</p><h1 id="接口简介"><a href="#接口简介" class="headerlink" title="接口简介"></a>接口简介</h1><ul><li><p>什么是接口：接口是特殊的抽象类，具体不在这里分析。</p></li><li><p>用来干什么：通常用接口定义抽象类的外观，就相当于一份契约，根据外部应用需要的功能，约束实现类应该实现的功能。</p></li><li><p>接口的思想：封装隔离</p></li><li><p>接口的好处：只要接口不变，内部实现类的变化不会影响外部应用，从而使得系统更加灵活，具有更好的扩展性和可维护性。接口是系统可插拔性的保证。</p></li><li><p>接口和抽象类：优先选择接口。既要定义子类的行为，又要为子类提供公共的功能时选择抽象类。</p></li></ul><h1 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a><strong>面向接口编程</strong></h1><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yfy.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yfy.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Impl</span> <span class="keyword">implements</span> <span class="title">Api</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String s)</span></span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">             System.out.println(<span class="string">"impl :"</span> + s);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yfy.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">             Api api = <span class="keyword">new</span> Impl();</span><br><span class="line">             </span><br><span class="line">             api.operation(<span class="string">"调用接口"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>面向接口编程：<font color="FF0000">接口 接口对象 = new 实现类()</font>; 这种模式不是真正的面向接口编程，因为代码中也有实现类。使用简单工厂设计模式就可以解决该问题。如果接口只有一个实现类，那么连condition都不用，这样非常简单，客户只知道Api和Factory，根本不知道实现类。如下节所示</strong></p></blockquote><h1 id="简单工厂-只有一个实现类"><a href="#简单工厂-只有一个实现类" class="headerlink" title="简单工厂(只有一个实现类)"></a>简单工厂(只有一个实现类)</h1><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yfy.test2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yfy.test2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Impl</span> <span class="keyword">implements</span> <span class="title">Api</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String s)</span></span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">             System.out.println(<span class="string">"impl :"</span> + s);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yfy.test2;</span><br><span class="line"><span class="keyword">import</span> com.yfy.test2.Api;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Api <span class="title">createApi</span><span class="params">()</span></span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">new</span> Impl();</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yfy.test2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">             Api api = Factory.createApi();</span><br><span class="line">             </span><br><span class="line">             api.operation(<span class="string">"调用接口"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面两小节中主要改变是把<strong>Api</strong> <strong>api</strong> <strong>=</strong> <strong>new</strong> <strong>Impl();</strong>这句放到简单工厂里面，这和直接调用有什么不同呢？</p><p>理解这个问题主要是理解简单工厂的位置。接口和简单工厂位于封装体内部，但是对外提供调用，外部客户端是不会获得实现类的任何信息。简单工厂真正实现客户端和实现类分割开。</p><blockquote><p>通常把工厂类实现为一个工具类（构造方法私有化），直接使用静态方法（static）就可以，也就是说简单工厂的方法是静态的，所以也称为静态工厂。</p></blockquote><h1 id="简单工厂方法写法"><a href="#简单工厂方法写法" class="headerlink" title="简单工厂方法写法"></a><strong>简单工厂方法写法</strong></h1><p>简单工厂的方法主要是<strong>选择</strong>合适的实现类来创建对象，比如第2节代码示例中的Factory类的createApi方法，主要关注这个方法的实现，我们写的思路是如果接口有多个实现类，如何选择，选择一定有条件，根据什么来选择，一般是根据一个参数，那么参数从何而来？</p><p>（1）参数来源于客户端，比如第2节代码示例中根据客户端传入的condition来选择。</p><p>这种方式有比较大的问题，让客户端传参数，那么客户端必须知道传入参数的含义，哪些是正确的参数、哪些是错误的。此外如果新增实现类就要在工厂中修改代码。</p><p>（2）参数来源于配置文件</p><p>这个方式一般的形式的是：在配置文件中写入信息（一般是实现类的全限定名），然后代码读取这个配置文件，根据反射的方式创建该实现类的对象。</p><p>（3）参数来源于系统，例如运行期间的某个状态。比如计数，当运行奇数和偶数怎么选择等等，这个灵活度比较高。</p><p>下面我们使用参数来源于配置文件的形式实现一个简单工厂模式的示例。</p><h1 id="参数来源于配置文件实战"><a href="#参数来源于配置文件实战" class="headerlink" title="参数来源于配置文件实战"></a>参数来源于配置文件实战</h1><p>接口的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yfy.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类ImplA</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yfy.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImplA</span> <span class="keyword">implements</span> <span class="title">Api</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String s)</span></span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">             System.out.println(<span class="string">"implA :"</span> + s);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类ImplB</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yfy.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImplB</span> <span class="keyword">implements</span> <span class="title">Api</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String s)</span></span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">             System.out.println(<span class="string">"implB :"</span> + s);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yfy.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Api <span class="title">createApi</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">        InputStream in = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            in = Factory.class.getResourceAsStream(<span class="string">"factory.properties"</span>);</span><br><span class="line">            pros.load(in);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"加载factory.properties文件失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (IOException e)</span><br><span class="line">                &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Api api = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            api = (Api) Class.forName(pros.getProperty(<span class="string">"className"</span>)).newInstance();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"获取className失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> api;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>factory.properties文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#className=com.yfy.test.ImplA</span><br><span class="line">className=com.yfy.test.ImplB</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yfy.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">             Api api = Factory.createApi();</span><br><span class="line">             api.operation(<span class="string">"正在使用简单工厂"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时在客户端就没有选择的过程，选择的过程在配置文件中实现。这个时候如果新添加一个实现类，那么只需要在配置文件中修改即可，不会在工厂方法中修改代码。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;简单工厂并不是标准设计模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;简单工厂设计模式提供一个创建对象实例的功能，而无需关心其具
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yefengyu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yefengyu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>模板设计模式</title>
    <link href="http://yefengyu.github.io/2019/01/31/%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yefengyu.github.io/2019/01/31/模板设计模式/</id>
    <published>2019-01-31T15:07:20.000Z</published>
    <updated>2019-02-10T02:10:01.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><strong>定义</strong></p><p>定义一个操作中的算法骨架，将步骤延迟到子类中。</p><p>模板设计模式是一种行为设计模式，一般是准备一个抽象类，将部分逻辑以具体方法或者具体的构造函数实现，然后声明一些抽象方法，这样可以强制子类实现剩余的逻辑。不同的子类以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。这就是模板设计模式能达成的功能。</p><p><strong>场景</strong></p><p>适用于一些复杂操作进行步骤分割、抽取公共部分由抽象父类实现、将不同的部分在父类中定义抽象实现、而将具体实现过程由子类完成。对于整体步骤很固定，但是某些部分易变，可以将易变的部分抽取出来，供子类实现。</p><p><strong>模式角色</strong></p><p>抽象类：实现模板方法、定义算法骨架</p><p>具体类：实现抽象类中的抽象方法，完成特定的算法</p><h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">AbstractClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"abstract class's constructor!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        concreteOperation1();</span><br><span class="line">        abstractOperation1();</span><br><span class="line">        abstractOperation2();</span><br><span class="line">        concreteOperation2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">concreteOperation1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"abstract class's concrete operation 1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">concreteOperation2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"abstract class's concrete operation 2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">abstractOperation1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">abstractOperation2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码中，定义了抽象类AbstractClass，它有一个构造函数，完成某些功能，也有两个具体的方法（concreteOperation1、concreteOperation2），这些方法最好定义成私有，两个抽象方法（abstractOperation1、abstractOperation2）这些方法定义成protected，让子类实现。而execute方法则可以当作算法 框架的入口方法。如果我们定义不同的实现类，那么必然要实现两个抽象方法，那么execute方法的执行算法也会跟着改变，但是总体的算法框架执行流程是不变的。这就是模板设计模式的精髓。</p><p>下面我们来编写两个实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteClassA</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">abstractOperation1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ConcreteClassA's abstractOperation1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">abstractOperation2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ConcreteClassA's abstractOperation2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteClassB</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">abstractOperation1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ConcreteClassB's abstractOperation1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">abstractOperation2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ConcreteClassB's abstractOperation2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面两个实现类中，对两个抽象方法进行实现（过于简单，哈哈），下面写个客户端进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ConcreteClassA concreteClassA = <span class="keyword">new</span> ConcreteClassA();</span><br><span class="line">        concreteClassA.execute();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"</span>);</span><br><span class="line"></span><br><span class="line">        ConcreteClassB concreteClassB = <span class="keyword">new</span> ConcreteClassB();</span><br><span class="line">        concreteClassB.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><blockquote><p>abstract class’s constructor!<br>abstract class’s concrete operation 1<br>ConcreteClassA’s abstractOperation1<br>ConcreteClassA’s abstractOperation2<br>abstract class’s concrete operation 2<br>$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$<br>abstract class’s constructor!<br>abstract class’s concrete operation 1<br>ConcreteClassB’s abstractOperation1<br>ConcreteClassB’s abstractOperation2<br>abstract class’s concrete operation 2</p></blockquote><p>通过上面的例子，我么可以看出，不同的实现类，重写的抽象方法的逻辑不同，导致算法执行的内容也不相同，但是算法骨架是没有改变的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义一个操作中的算法骨架，将步骤延迟到子类中。&lt;/p&gt;
&lt;p&gt;模板设计模式是一种行为设
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yefengyu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yefengyu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>责任链设计模式</title>
    <link href="http://yefengyu.github.io/2019/01/30/%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yefengyu.github.io/2019/01/30/责任链设计模式/</id>
    <published>2019-01-30T11:07:31.000Z</published>
    <updated>2019-02-10T02:16:34.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>首先设想这样一个场景，有一个事件流，经过我们系统，会执行多个处理逻辑，每一个处理逻辑相对比较独立，最后输出结果。事件流执行过程如下图所示：</p><p><img src="/2019/01/30/责任链设计模式/sence.PNG" alt="事件流场景"></p><p>针对上面的场景，现在我们有如下要求，如果新增一个处理逻辑，不应该对原有的处理逻辑进行改动，<font color="FF0000">且事件流执行的处理逻辑单元没有先后之分</font>。（注意此处）</p><h1 id="责任链实例演示"><a href="#责任链实例演示" class="headerlink" title="责任链实例演示"></a>责任链实例演示</h1><p>新建一个maven工程，首先在pom.xml文件添加如下依赖，lombok简化开发。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.16.18&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>注意下面使用@Data注解，该注解会提供getter、setter、equals、canEqual、hashCode、toString方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//事件ID</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//员工姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//薪资</span></span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//奖金</span></span><br><span class="line">    <span class="keyword">private</span> Double bonus;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销售量</span></span><br><span class="line">    <span class="keyword">private</span> Integer salesVolume;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工作年限</span></span><br><span class="line">    <span class="keyword">private</span> Integer years;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是一个简单的员工对象（当作事件流，每到来一个员工对象，就对该对象进行处理），根据员工对象的一些信息，给员工计算奖金。假如现有以下几条规则：</p><ol><li>销售额大于10，奖金加10000</li><li>工作满3年，奖金加20000</li></ol><p>上面几个规则看起来没什么实际意义，逻辑也很简单。先不要管这些，暂且认为上面的几个规则：非常复杂、没有任何关联、是合理的，并且新规则可能随时添加。</p><p>责任链的思想：首先我们要为每一个规则的执行定义一个接口，由实现类具体执行规则，这些规则也就是针对事件（员工）的处理逻辑单元。其次我们要把规则（处理逻辑）关联起来，最简单的办法就是将规则加入到List中，然后循环遍历执行，当然实际中这也是一种方法，下面我们的这种方式，也是先把每个规则加入到List中去，只是执行的时候，有些不同：编写责任链FilterChain，包含List<filter>属性和相关方法，将规则（Filter实现类）加入到List中，之后取出一个规则执行，执行规则的业务逻辑方法之后，再回调FilterChain的doFilter，达到循环的目的。</filter></p><ol><li><p>责任链。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterChain</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//规则过滤器列表，实现Filter接口的过滤器将真正执行对事件的处理</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Filter&gt; filters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//过滤器列表的索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向责任链中加入过滤器（单个）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterChain <span class="title">addFilter</span><span class="params">(Filter filter)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filters.add(filter);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向责任链中加入过滤器（多个）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterChain <span class="title">addFilters</span><span class="params">(List&lt;Filter&gt; filters)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filters.addAll(filters);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理事件（employee）从FilterChain中获取过滤器，进行处理，处理完成之后过滤器会再调用该方法，继续执行下一个filter.这就需要在每个Filter接口的实现类中最后一句需要回调FilterChain的doFilter方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Employee employee, FilterChain chain)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == filters.size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Filter filter = filters.get(index);</span><br><span class="line">        index++;</span><br><span class="line">        filter.doFilter(employee, chain);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Filter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Employee employee, FilterChain chain)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>规则1：销售额大于10，奖金加10000</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rule1</span> <span class="keyword">implements</span> <span class="title">Filter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Employee employee, FilterChain chain)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="comment">//具体逻辑，实际项目应该很复杂</span></span><br><span class="line">        <span class="keyword">if</span>(employee.getSalesVolume() &gt; <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            employee.setBonus(employee.getBonus() + <span class="number">10000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//注意回调FilterChain的doFilter方法，让FilterChain继续执行下一个Filter</span></span><br><span class="line">        chain.doFilter(employee, chain);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>规则2：工作满3年，奖金加20000</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rule2</span> <span class="keyword">implements</span> <span class="title">Filter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Employee employee, FilterChain chain)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//具体逻辑，实际项目应该很复杂</span></span><br><span class="line">        <span class="keyword">if</span>(employee.getYears() &gt;= <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            employee.setBonus(employee.getBonus() + <span class="number">20000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注意回调FilterChain的doFilter方法，让FilterChain继续执行下一个Filter</span></span><br><span class="line">        chain.doFilter(employee, chain);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//1,构造事件</span></span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">        employee.setSalary(<span class="number">13456.56</span>);</span><br><span class="line">        employee.setBonus(<span class="number">5256.2</span>);</span><br><span class="line">        employee.setSalesVolume(<span class="number">12</span>);</span><br><span class="line">        employee.setId(<span class="number">1L</span>);</span><br><span class="line">        employee.setYears(<span class="number">5</span>);</span><br><span class="line">        employee.setName(<span class="string">"tom"</span>);</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2,将规则过滤器加入责任链中</span></span><br><span class="line">        FilterChain filterChain = <span class="keyword">new</span> FilterChain();</span><br><span class="line">        filterChain.addFilter(<span class="keyword">new</span> Rule1()).addFilter(<span class="keyword">new</span> Rule2());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3,预处理，具体问题具体对待</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4,执行规则</span></span><br><span class="line">        filterChain.doFilter(employee, filterChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5,后处理，具体问题具体对待</span></span><br><span class="line"></span><br><span class="line">        System.out.println(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结果</p><blockquote><p>Employee{id=1, name=’tom’, salary=13456.56, bonus=<strong>5256.2</strong>, salesVolume=12, years=5}<br>Employee{id=1, name=’tom’, salary=13456.56, bonus=<strong>35256.2</strong>, salesVolume=12, years=5}</p></blockquote></li></ol><p>上面的代码已经是使用责任链来完成了功能，如果我们想新添加一个规则，只需实现Filter接口，并且重写doFilter方法，将新添加的规则过滤器加入责任链中即可。也就是完成以下两步即可：</p><ul><li><p>实现Filter接口并重写doFilter方法</p></li><li><p>客户端添加该规则过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filterChain.addFilter(<span class="keyword">new</span> Rule1()).addFilter(<span class="keyword">new</span> Rule2());</span><br></pre></td></tr></table></figure></li></ul><p>举例：假如新加一个规则Rule3，规则内容是将工作年满5年，并且当年销售量达超过20以上的员工的工资上调10000元。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rule3</span> <span class="keyword">implements</span> <span class="title">Filter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Employee employee, FilterChain chain)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(employee.getYears() &gt;= <span class="number">5</span> &amp;&amp; employee.getSalesVolume() &gt; <span class="number">20</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            employee.setSalary(employee.getSalary() + <span class="number">10000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        chain.doFilter(employee, chain);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将规则过滤器加入到责任链中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//1,构造事件</span></span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">        employee.setSalary(<span class="number">13456.56</span>);</span><br><span class="line">        employee.setBonus(<span class="number">5256.2</span>);</span><br><span class="line">        employee.setSalesVolume(<span class="number">22</span>);<span class="comment">//注意此处为了满足规则3，已经上调销售量</span></span><br><span class="line">        employee.setId(<span class="number">1L</span>);</span><br><span class="line">        employee.setYears(<span class="number">5</span>);</span><br><span class="line">        employee.setName(<span class="string">"tom"</span>);</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">        <span class="comment">//2,将规则加入责任链中，注意新加了Rule3</span></span><br><span class="line">        FilterChain filterChain = <span class="keyword">new</span> FilterChain();</span><br><span class="line">        filterChain.addFilter(<span class="keyword">new</span> Rule1()).addFilter(<span class="keyword">new</span> Rule2()).addFilter(<span class="keyword">new</span> Rule3());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3,预处理</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4,执行规则</span></span><br><span class="line">        filterChain.doFilter(employee, filterChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5,后处理</span></span><br><span class="line"></span><br><span class="line">        System.out.println(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意上面的filterChain添加了Rule3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filterChain.addFilter(<span class="keyword">new</span> Rule1()).addFilter(<span class="keyword">new</span> Rule2()).addFilter(<span class="keyword">new</span> Rule3());</span><br></pre></td></tr></table></figure><p>以及销售量上调以满足Rule3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">employee.setSalesVolume(<span class="number">22</span>);</span><br></pre></td></tr></table></figure><p>这些条件符合规则3的逻辑，那么该员工再加工资10000元。</p><blockquote><p>Employee{id=1, name=’tom’, salary=<strong>13456.56</strong>, bonus=5256.2, salesVolume=22, years=5}<br>Employee{id=1, name=’tom’, salary=<strong>23456.559999999998</strong>, bonus=35256.2, salesVolume=22, years=5}</p></blockquote><p>上面代码完成了我们开始的预想，如果新添加规则，不需要在原有规则的基础修改，而是新添加一个规则，并且加入到责任链中，这样就可以执行对应的规则，但是这样也有个问题，我们并不想显示的将规则加入到责任链，如果继承接口即可自动加入到责任链，这样的话可以把核心逻辑与规则分开，其实通过注解即可完成这项需求。</p><h1 id="责任链和注解配合使用"><a href="#责任链和注解配合使用" class="headerlink" title="责任链和注解配合使用"></a>责任链和注解配合使用</h1><ol><li><p>自定义注解 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableFilter</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>在每个规则上面都加上EnableFilter注解。</p></li><li><p>添加依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.reflections&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;reflections&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.9.10&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>扫描注解修饰的类，并将这些类实例对象返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.reflections.Reflections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Filter&gt; <span class="title">getFilters</span><span class="params">(String packages)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        List&lt;Filter&gt; filterList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//通过注解扫描指定的包</span></span><br><span class="line">        Reflections reflections = <span class="keyword">new</span> Reflections(packages);</span><br><span class="line">        <span class="comment">//如果该包下面有被EnableFilter注解修饰的类，那么将该类的实例加入到列表中，并最终返回</span></span><br><span class="line">        Set&lt;Class&lt;?&gt;&gt; filters = reflections.getTypesAnnotatedWith(EnableFilter.class);</span><br><span class="line">        <span class="keyword">for</span>(Class filter : filters)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                filterList.add((Filter)filter.newInstance());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> filterList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>客户端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//1,构造事件</span></span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">        employee.setSalary(<span class="number">13456.56</span>);</span><br><span class="line">        employee.setBonus(<span class="number">5256.2</span>);</span><br><span class="line">        employee.setSalesVolume(<span class="number">22</span>);</span><br><span class="line">        employee.setId(<span class="number">1L</span>);</span><br><span class="line">        employee.setYears(<span class="number">5</span>);</span><br><span class="line">        employee.setName(<span class="string">"tom"</span>);</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">        <span class="comment">//2,将规则加入责任链中,通过注解扫描指定的包，此处无需指定执行哪个规则（FIlter的实现类）</span></span><br><span class="line">        FilterChain filterChain = <span class="keyword">new</span> FilterChain();</span><br><span class="line">         filterChain.addFilters(FilterFactory.getFilters(<span class="string">"com.yefengyu.design.patterns"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3,预处理</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4,执行规则</span></span><br><span class="line">        filterChain.doFilter(employee, filterChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5,后处理</span></span><br><span class="line"></span><br><span class="line">        System.out.println(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><p>上面客户端的责任链并没有手动添加规则过滤器的实现类，通过FilterFactory自动扫描指定的包下面的被EnableFilter注解修饰的类，这样达到了动态添加规则，又不影响主体代码的效果。</p></li><li><p>如果想排除某些规则该怎么办？</p><ul><li>不能直接修改规则代码，将注解去除</li><li>需要使用配置文件，添加一个工具类，读取配置文件的内容，然后去除对应的过滤器</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;首先设想这样一个场景，有一个事件流，经过我们系统，会执行多个处理逻辑，每一个处理逻辑相对比较独立，最后输出结果。事件流执行过程如下图所示：&lt;
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yefengyu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yefengyu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
