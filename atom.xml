<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yefengyu.github.io/"/>
  <updated>2019-01-30T14:40:33.642Z</updated>
  <id>http://yefengyu.github.io/</id>
  
  <author>
    <name>yefengyu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>责任链设计模式</title>
    <link href="http://yefengyu.github.io/2019/01/30/%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yefengyu.github.io/2019/01/30/责任链设计模式/</id>
    <published>2019-01-30T11:07:31.000Z</published>
    <updated>2019-01-30T14:40:33.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>首先设想这样一个场景，有一个事件流，经过我们系统，会经过多个处理，每一个处理相对比较独立，最后输出结果。如下图所示：</p><p><img src="/2019/01/30/责任链设计模式/sence.PNG" alt="事件流场景"></p><p>针对上面的场景，我们有如下要求，如果新增一个处理流程，不会对原有的代码进行改动，<font color="FF0000">且事件处理没有先后之分</font>。（注意此处）</p><h1 id="责任链处理流程"><a href="#责任链处理流程" class="headerlink" title="责任链处理流程"></a>责任链处理流程</h1><p>首先在pom.xml文件添加如下依赖，减少对象的getter、setter方法占用页面。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.16.18&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>注意下面使用@Data注解，该注解会提供getter、setter、equals、canEqual、hashCode、toString方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//事件ID</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//员工姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//薪资</span></span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//奖金</span></span><br><span class="line">    <span class="keyword">private</span> Double bonus;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销售量</span></span><br><span class="line">    <span class="keyword">private</span> Integer salesVolume;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工作年限</span></span><br><span class="line">    <span class="keyword">private</span> Integer years;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是一个简单的员工对象，根据员工对象的一些信息，给员工计算奖金。假如有以下几条规则：</p><ol><li>销售额大于10，奖金加10000</li><li>工作满3年，奖金加20000</li></ol><p>上面几个规则看起来没什么实际意义，逻辑也很简单。先不要管这些，就认为上面的几个规则：非常复杂、没有任何关联，是合理的，并且规则可能随时添加。</p><ol><li><p>责任链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterChain</span> <span class="keyword">implements</span> <span class="title">Filter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//过滤器列表，实现Filter接口的过滤器将真正执行对事件的处理</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Filter&gt; filters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//过滤器列表的索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向责任链中加入过滤器（单个）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterChain <span class="title">addFilter</span><span class="params">(Filter filter)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filters.add(filter);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向责任链中加入过滤器（多个）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterChain <span class="title">addFilters</span><span class="params">(List&lt;Filter&gt; filters)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filters.addAll(filters);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理事件（employee）从FilterChain中获取过滤器，进行处理，处理完成之后过滤器会再调用该方法，继续执行下一个filter.这就需要在每个Filter接口的实现类中最后一句需要回调FilterChain的doFilter方法。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Employee employee, FilterChain chain)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == filters.size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Filter filter = filters.get(index);</span><br><span class="line">        index++;</span><br><span class="line">        filter.doFilter(employee, chain);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Filter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Employee employee, FilterChain chain)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>规则1：销售额大于10，奖金加10000</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rule1</span> <span class="keyword">implements</span> <span class="title">Filter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Employee employee, FilterChain chain)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="comment">//具体逻辑，实际项目应该很复杂</span></span><br><span class="line">        <span class="keyword">if</span>(employee.getSalesVolume() &gt; <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            employee.setBonus(employee.getBonus() + <span class="number">10000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//注意回调FilterChain的doFilter方法，让FilterChain继续执行下一个Filter</span></span><br><span class="line">        chain.doFilter方法，让(employee, chain);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>工作满3年，奖金加20000</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rule2</span> <span class="keyword">implements</span> <span class="title">Filter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Employee employee, FilterChain chain)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//具体逻辑，实际项目应该很复杂</span></span><br><span class="line">        <span class="keyword">if</span>(employee.getYears() &gt;= <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            employee.setBonus(employee.getBonus() + <span class="number">20000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意回调FilterChain的doFilter方法，让FilterChain继续执行下一个Filter</span></span><br><span class="line">        chain.doFilter(employee, chain);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//1,构造事件</span></span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">        employee.setSalary(<span class="number">13456.56</span>);</span><br><span class="line">        employee.setBonus(<span class="number">5256.2</span>);</span><br><span class="line">        employee.setSalesVolume(<span class="number">12</span>);</span><br><span class="line">        employee.setId(<span class="number">1L</span>);</span><br><span class="line">        employee.setYears(<span class="number">5</span>);</span><br><span class="line">        employee.setName(<span class="string">"tom"</span>);</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2,将规则过滤器加入责任链中</span></span><br><span class="line">        FilterChain filterChain = <span class="keyword">new</span> FilterChain();</span><br><span class="line">        filterChain.addFilter(<span class="keyword">new</span> Rule1()).addFilter(<span class="keyword">new</span> Rule2());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3,预处理</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4,执行规则</span></span><br><span class="line">        filterChain.doFilter(employee, filterChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5,后处理</span></span><br><span class="line"></span><br><span class="line">        System.out.println(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结果</p><blockquote><p>Employee{id=1, name=’tom’, salary=13456.56, bonus=<strong>5256.2</strong>, salesVolume=12, years=5}<br>Employee{id=1, name=’tom’, salary=13456.56, bonus=<strong>35256.2</strong>, salesVolume=12, years=5}</p></blockquote></li></ol><p>上面的代码已经是使用责任链来完成了功能，如果我们想添加一个规则，只需实现Filter接口，并且重写doFilter方法，将新添加的规则过滤器加入责任链中即可。也就是：</p><ul><li><p>实现Filter接口并重写doFilter方法</p></li><li><p>客户端添加该规则过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filterChain.addFilter(<span class="keyword">new</span> Rule1()).addFilter(<span class="keyword">new</span> Rule2());</span><br></pre></td></tr></table></figure></li></ul><p>举例：加如又加了一个规则Rule3，将年满5年，并且销售量达到20以上的，再加工资10000元。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rule3</span> <span class="keyword">implements</span> <span class="title">Filter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Employee employee, FilterChain chain)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(employee.getYears() &gt;= <span class="number">5</span> &amp;&amp; employee.getSalesVolume() &gt; <span class="number">20</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            employee.setSalary(employee.getSalary() + <span class="number">10000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        chain.doFilter(employee, chain);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将规则过滤器加入到责任链中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//1,构造事件</span></span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">        employee.setSalary(<span class="number">13456.56</span>);</span><br><span class="line">        employee.setBonus(<span class="number">5256.2</span>);</span><br><span class="line">        employee.setSalesVolume(<span class="number">22</span>);</span><br><span class="line">        employee.setId(<span class="number">1L</span>);</span><br><span class="line">        employee.setYears(<span class="number">5</span>);</span><br><span class="line">        employee.setName(<span class="string">"tom"</span>);</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">        <span class="comment">//2,将规则加入责任链中</span></span><br><span class="line">        FilterChain filterChain = <span class="keyword">new</span> FilterChain();</span><br><span class="line">        filterChain.addFilter(<span class="keyword">new</span> Rule1()).addFilter(<span class="keyword">new</span> Rule2()).addFilter(<span class="keyword">new</span> Rule3());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3,预处理</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4,执行规则</span></span><br><span class="line">        filterChain.doFilter(employee, filterChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5,后处理</span></span><br><span class="line"></span><br><span class="line">        System.out.println(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意上面的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filterChain.addFilter(<span class="keyword">new</span> Rule1()).addFilter(<span class="keyword">new</span> Rule2()).addFilter(<span class="keyword">new</span> Rule3());</span><br></pre></td></tr></table></figure><p>以及</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">employee.setSalesVolume(<span class="number">22</span>);</span><br></pre></td></tr></table></figure><p>这些条件符合规则3的逻辑，那么该员工再加工资10000元。</p><blockquote><p>Employee{id=1, name=’tom’, salary=<strong>13456.56</strong>, bonus=5256.2, salesVolume=22, years=5}<br>Employee{id=1, name=’tom’, salary=<strong>23456.559999999998</strong>, bonus=35256.2, salesVolume=22, years=5}</p></blockquote><p>上面完成了我们开始的预想，如果添加规则，不需要在原有的规则基础修改，而是新添加一个规则，并且加入到责任链中，这样就可以执行对应的规则，不过我们想，有时候，我们并不想显示的将规则加入到责任链，我们只需要继承接口即可自动加入到责任链，这样可以把核心逻辑与规则分开。通过注解即可完成这项功能。</p><h1 id="责任链和注解配合使用"><a href="#责任链和注解配合使用" class="headerlink" title="责任链和注解配合使用"></a>责任链和注解配合使用</h1><ol><li><p>自定义注解 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableFilter</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>在每个规则上面都加上EnableFilter注解。</p></li><li><p>添加依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.reflections&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;reflections&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.9.10&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>扫描注解修饰的类，并将这些类实例化返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.reflections.Reflections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Filter&gt; <span class="title">getFilters</span><span class="params">(String packages)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        List&lt;Filter&gt; filterList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//通过注解扫描指定的包</span></span><br><span class="line">        Reflections reflections = <span class="keyword">new</span> Reflections(packages);</span><br><span class="line">        <span class="comment">//如果该包下面有被EnableFilter注解修饰的类，那么将该类的实例加入到列表中，并最终返回</span></span><br><span class="line">        Set&lt;Class&lt;?&gt;&gt; filters = reflections.getTypesAnnotatedWith(EnableFilter.class);</span><br><span class="line">        <span class="keyword">for</span>(Class filter : filters)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                filterList.add((Filter)filter.newInstance());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> filterList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>客户端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yefengyu.design.patterns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//1,构造事件</span></span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">        employee.setSalary(<span class="number">13456.56</span>);</span><br><span class="line">        employee.setBonus(<span class="number">5256.2</span>);</span><br><span class="line">        employee.setSalesVolume(<span class="number">22</span>);</span><br><span class="line">        employee.setId(<span class="number">1L</span>);</span><br><span class="line">        employee.setYears(<span class="number">5</span>);</span><br><span class="line">        employee.setName(<span class="string">"tom"</span>);</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">        <span class="comment">//2,将规则加入责任链中,通过注解扫描指定的包</span></span><br><span class="line">        FilterChain filterChain = <span class="keyword">new</span> FilterChain();</span><br><span class="line">         filterChain.addFilters(FilterFactory.getFilters(<span class="string">"com.yefengyu.design.patterns"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3,预处理</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4,执行规则</span></span><br><span class="line">        filterChain.doFilter(employee, filterChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5,后处理</span></span><br><span class="line"></span><br><span class="line">        System.out.println(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><p>上面客户端的责任链并没有手动添加规则过滤器的实现类，通过FilterFactory自动扫描指定的包下面的被EnableFilter注解修饰的类，这样达到了动态添加规则，又不影响主题代码的效果。</p></li><li><p>如果想排除某些规则该怎么办？</p><ul><li>不能直接修改规则代码，将注解去除</li><li>需要使用配置文件，修改工具类，读取配置文件的内容，然后去除对应的过滤器</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;首先设想这样一个场景，有一个事件流，经过我们系统，会经过多个处理，每一个处理相对比较独立，最后输出结果。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yefengyu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
